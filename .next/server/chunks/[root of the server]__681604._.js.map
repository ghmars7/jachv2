{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://user:user@localhost:27017/saint-vinci?authSource=admin\";\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define the MONGODB_URI environment variable inside .env\");\r\n}\r\n\r\n// Déclare globalement une propriété _mongoose pour gérer la connexion\r\ndeclare global {\r\n  var _mongoose: { conn: mongoose.Mongoose | null; promise: Promise<mongoose.Mongoose> | null };\r\n}\r\n\r\n// Cache de connexion pour éviter les reconnexions multiples pendant le développement\r\nlet cached = global._mongoose;\r\n\r\nif (!cached) {\r\n  cached = global._mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  // Si la connexion est déjà établie, on retourne la connexion\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  // Si la promesse de connexion n'existe pas, on la crée\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI).then((mongooseInstance) => {\r\n      return mongooseInstance;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (error) {\r\n    cached.promise = null; // Réinitialisation de la promesse en cas d'erreur\r\n    console.error(\"Failed to connect to MongoDB:\", error);\r\n    throw error;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB;\r\nexport { mongoose }; // Ajout de l'exportation de mongoose\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAE/C,uCAAkB;;AAElB;AAOA,qFAAqF;AACrF,IAAI,SAAS,OAAO,SAAS;AAE7B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,SAAS,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC1D;AAEA,eAAe;IACb,6DAA6D;IAC7D,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,uDAAuD;IACvD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC;YACnD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,OAAO;QACd,OAAO,OAAO,GAAG,MAAM,kDAAkD;QACzE,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe;;CACM,qCAAqC"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\r\nimport * as bcrypt from \"bcrypt\";\r\n\r\n// Interface pour typer un document User\r\ninterface IUser extends Document {\r\n  email: string;\r\n  password: string;\r\n  birthDate: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: \"admin\" | \"professeur\";\r\n  class: string;\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst UserSchema = new mongoose.Schema<IUser>(\r\n  {\r\n    email: {\r\n      type: String,\r\n      required: [true, \"L'email est requis\"],\r\n      unique: true,\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, \"Le mot de passe est requis\"],\r\n      minlength: [6, \"Le mot de passe doit contenir au moins 6 caractères\"],\r\n    },\r\n    birthDate: {\r\n      type: String,\r\n      required: [true, \"La date de naissance est requise\"],\r\n    },\r\n    firstName: {\r\n      type: String,\r\n      required: [true, \"Le prénom est requis\"],\r\n      trim: true,\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, \"Le nom est requis\"],\r\n      trim: true,\r\n    },\r\n    role: {\r\n      type: String,\r\n      enum: [\"admin\", \"professeur\"],\r\n      required: [true, \"Le rôle est requis\"],\r\n    },\r\n    class: {\r\n      type: String,\r\n      default: \"\",\r\n      // required: function () {\r\n      //   return this.role === \"teacher\";\r\n      // }, // `this` fait référence au document\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n// UserSchema.pre<IUser>(\"save\", async function (next) {\r\n//   if (!this.isModified(\"password\")) return next();\r\n//   this.password = await bcrypt.hash(this.password, 10);\r\n//   next();\r\n// });\r\n\r\nUserSchema.pre<IUser>(\"save\", function (next) {\r\n  if (!this.isModified(\"password\")) return next();\r\n  // On ne modifie plus le mot de passe, on le laisse tel quel\r\n  next();\r\n});\r\n\r\n// Méthode d'instance pour comparer les mots de passe\r\n// UserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\r\n//   return bcrypt.compare(candidatePassword, this.password);\r\n// };\r\n\r\nUserSchema.methods.comparePassword = function (candidatePassword: string): boolean {\r\n  return candidatePassword === this.password;\r\n};\r\n// Création et exportation du modèle User\r\nconst UserModel = mongoose.models.User || mongoose.model(\"User\", UserSchema);\r\n\r\nexport default UserModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAeA,MAAM,aAAa,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACpC;IACE,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;QACtC,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;YAAC;YAAG;SAAsD;IACvE;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAmC;IACtD;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,MAAM;IACR;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;SAAa;QAC7B,UAAU;YAAC;YAAM;SAAqB;IACxC;IACA,OAAO;QACL,MAAM;QACN,SAAS;IAIX;AACF,GACA;IACE,YAAY;AACd;AAEF,wDAAwD;AACxD,qDAAqD;AACrD,0DAA0D;AAC1D,YAAY;AACZ,MAAM;AAEN,WAAW,GAAG,CAAQ,QAAQ,SAAU,IAAI;IAC1C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IACzC,4DAA4D;IAC5D;AACF;AAEA,qDAAqD;AACrD,sGAAsG;AACtG,6DAA6D;AAC7D,KAAK;AAEL,WAAW,OAAO,CAAC,eAAe,GAAG,SAAU,iBAAyB;IACtE,OAAO,sBAAsB,IAAI,CAAC,QAAQ;AAC5C;AACA,yCAAyC;AACzC,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAElD"}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 204, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/app/api/users/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport connectDB from \"@/lib/db\";\r\nimport UserModel from \"@/models/User\";\r\n\r\nexport async function GET() {\r\n  try {\r\n    await connectDB();\r\n    const teachers = await UserModel.find({}).sort({ lastName: 1 });\r\n    return NextResponse.json(teachers);\r\n  } catch (error) {\r\n    console.log(error);\r\n    return NextResponse.json({ error: \"Erreur lors de la récupération des utilisateurs\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    await connectDB();\r\n    const data = await request.json();\r\n    console.log(\"Data Received:\", data);\r\n    const teacher = await UserModel.create(data);\r\n    console.log(\"teacher: \" + teacher);\r\n    return NextResponse.json(teacher, { status: 201 });\r\n  } catch (error) {\r\n    console.log(error);\r\n    return NextResponse.json({ error: \"Erreur lors de la création du utilisateur\" }, { status: 500 });\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;AACA;AACA;AADA;;;;AAGO,eAAe;IACpB,IAAI;QACF,MAAM,CAAA,GAAA,2HAAA,CAAA,UAAS,AAAD;QACd,MAAM,WAAW,MAAM,gHAAA,CAAA,UAAS,CAAC,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC;YAAE,UAAU;QAAE;QAC7D,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC3B,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAkD,GAAG;YAAE,QAAQ;QAAI;IACvG;AACF;AAEO,eAAe,KAAK,OAAgB;IACzC,IAAI;QACF,MAAM,CAAA,GAAA,2HAAA,CAAA,UAAS,AAAD;QACd,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC,kBAAkB;QAC9B,MAAM,UAAU,MAAM,gHAAA,CAAA,UAAS,CAAC,MAAM,CAAC;QACvC,QAAQ,GAAG,CAAC,cAAc;QAC1B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,SAAS;YAAE,QAAQ;QAAI;IAClD,EAAE,OAAO,OAAO;QACd,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAA4C,GAAG;YAAE,QAAQ;QAAI;IACjG;AACF"}},
    {"offset": {"line": 250, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}