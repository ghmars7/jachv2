{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://user:user@localhost:27017/saint-vinci?authSource=admin\";\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define the MONGODB_URI environment variable inside .env\");\r\n}\r\n\r\n// Déclare globalement une propriété _mongoose pour gérer la connexion\r\ndeclare global {\r\n  var _mongoose: { conn: mongoose.Mongoose | null; promise: Promise<mongoose.Mongoose> | null };\r\n}\r\n\r\n// Cache de connexion pour éviter les reconnexions multiples pendant le développement\r\nlet cached = global._mongoose;\r\n\r\nif (!cached) {\r\n  cached = global._mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  // Si la connexion est déjà établie, on retourne la connexion\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  // Si la promesse de connexion n'existe pas, on la crée\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI).then((mongooseInstance) => {\r\n      return mongooseInstance;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (error) {\r\n    cached.promise = null; // Réinitialisation de la promesse en cas d'erreur\r\n    console.error(\"Failed to connect to MongoDB:\", error);\r\n    throw error;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB;\r\nexport { mongoose }; // Ajout de l'exportation de mongoose\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAE/C,uCAAkB;;AAElB;AAOA,qFAAqF;AACrF,IAAI,SAAS,OAAO,SAAS;AAE7B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,SAAS,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC1D;AAEA,eAAe;IACb,6DAA6D;IAC7D,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,uDAAuD;IACvD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC;YACnD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,OAAO;QACd,OAAO,OAAO,GAAG,MAAM,kDAAkD;QACzE,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe;;CACM,qCAAqC"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/Student.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst StudentSchema = new mongoose.Schema(\r\n  {\r\n    firstName: {\r\n      type: String,\r\n      required: [true, \"Le prénom est requis\"],\r\n      trim: true,\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, \"Le nom est requis\"],\r\n      trim: true,\r\n    },\r\n    class: {\r\n      type: String,\r\n      required: [true, \"La classe est requise\"],\r\n    },\r\n    birthDate: {\r\n      type: String,\r\n      required: [true, \"La date de naissance est requise\"],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, \"L'email est requis\"],\r\n      unique: true,\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    parentEmail: {\r\n      type: String,\r\n      required: [true, \"L'email du parent est requis\"],\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// export default mongoose.models.StudentModel || mongoose.model(\"Student\", StudentSchema);\r\n// Create and export the model only once\r\nconst StudentModel = mongoose.models.Student || mongoose.model(\"Student\", StudentSchema);\r\n\r\nexport default StudentModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACvC;IACE,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,MAAM;IACR;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAmC;IACtD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;QACtC,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,MAAM;QACN,WAAW;IACb;AACF,GACA;IACE,YAAY;AACd;AAGF,2FAA2F;AAC3F,wCAAwC;AACxC,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW;uCAE3D"}},
    {"offset": {"line": 172, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 178, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/User.ts"],"sourcesContent":["import mongoose, { Document, Schema } from \"mongoose\";\r\nimport * as bcrypt from \"bcrypt\";\r\nimport { passwordGenerator } from \"@/utils/PasswordGenerator\";\r\n\r\n// Interface pour typer un document User\r\ninterface IUser extends Document {\r\n  email: string;\r\n  password: string;\r\n  birthDate: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  role: \"admin\" | \"professeur\";\r\n  class: string;\r\n  comparePassword(candidatePassword: string): Promise<boolean>;\r\n}\r\n\r\nconst UserSchema = new mongoose.Schema<IUser>(\r\n  {\r\n    email: {\r\n      type: String,\r\n      required: [true, \"L'email est requis\"],\r\n      unique: true,\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    password: {\r\n      type: String,\r\n      required: [true, \"Le mot de passe est requis\"],\r\n      minlength: [6, \"Le mot de passe doit contenir au moins 6 caractères\"],\r\n    },\r\n    birthDate: {\r\n      type: String,\r\n      required: [true, \"La date de naissance est requise\"],\r\n    },\r\n    firstName: {\r\n      type: String,\r\n      required: [true, \"Le prénom est requis\"],\r\n      trim: true,\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, \"Le nom est requis\"],\r\n      trim: true,\r\n    },\r\n    role: {\r\n      type: String,\r\n      enum: [\"admin\", \"professeur\"],\r\n      required: [true, \"Le rôle est requis\"],\r\n    },\r\n    class: {\r\n      type: String,\r\n      // required: function () {\r\n      //   return this.role === \"teacher\";\r\n      // }, // `this` fait référence au document\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// UserSchema.pre<IUser>(\"save\", async function (next) {\r\n//   if (!this.isModified(\"password\")) return next();\r\n//   this.password = await bcrypt.hash(this.password, 10);\r\n//   next();\r\n// });\r\n\r\nUserSchema.pre<IUser>(\"save\", function (next) {\r\n  if (!this.isModified(\"password\")) return next();\r\n  // On ne modifie plus le mot de passe, on le laisse tel quel\r\n  next();\r\n});\r\n\r\n\r\n// Méthode d'instance pour comparer les mots de passe\r\n// UserSchema.methods.comparePassword = async function (candidatePassword: string): Promise<boolean> {\r\n//   return bcrypt.compare(candidatePassword, this.password);\r\n// };\r\n\r\n\r\nUserSchema.methods.comparePassword = function (candidatePassword: string): boolean {\r\n  return candidatePassword === this.password;\r\n};\r\n// Création et exportation du modèle User\r\nconst UserModel = mongoose.models.User || mongoose.model(\"User\", UserSchema);\r\n\r\nexport default UserModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAgBA,MAAM,aAAa,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACpC;IACE,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;QACtC,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAA6B;QAC9C,WAAW;YAAC;YAAG;SAAsD;IACvE;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAmC;IACtD;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,MAAM;IACR;IACA,MAAM;QACJ,MAAM;QACN,MAAM;YAAC;YAAS;SAAa;QAC7B,UAAU;YAAC;YAAM;SAAqB;IACxC;IACA,OAAO;QACL,MAAM;IAIR;AACF,GACA;IACE,YAAY;AACd;AAGF,wDAAwD;AACxD,qDAAqD;AACrD,0DAA0D;AAC1D,YAAY;AACZ,MAAM;AAEN,WAAW,GAAG,CAAQ,QAAQ,SAAU,IAAI;IAC1C,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,aAAa,OAAO;IACzC,4DAA4D;IAC5D;AACF;AAGA,qDAAqD;AACrD,sGAAsG;AACtG,6DAA6D;AAC7D,KAAK;AAGL,WAAW,OAAO,CAAC,eAAe,GAAG,SAAU,iBAAyB;IACtE,OAAO,sBAAsB,IAAI,CAAC,QAAQ;AAC5C;AACA,yCAAyC;AACzC,MAAM,YAAY,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,IAAI,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,QAAQ;uCAElD"}},
    {"offset": {"line": 265, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/Classe.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\nimport StudentModel from \"./Student\";\r\nimport Student from \"./Student\";\r\n\r\nconst ClassSchema = new mongoose.Schema(\r\n  {\r\n    level: {\r\n      type: String,\r\n      required: [true, \"La classe est requise\"],\r\n    },\r\n    studentsNumber: {\r\n      type: Number,\r\n      required: [true, \"Le nombre d'élève est requis\"],\r\n      unique: true,\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    teacher: {\r\n      type: String,\r\n      required: [true, \"Le professeur est requis\"],\r\n    },\r\n    students: [Student],\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nconst ClassModel = mongoose.models.Class || mongoose.model(\"Class\", ClassSchema);\r\n\r\nexport default ClassModel;\r\n"],"names":[],"mappings":";;;AAAA;AAEA;;;AAEA,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACrC;IACE,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,SAAS;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;IAC9C;IACA,UAAU;QAAC,mHAAA,CAAA,UAAO;KAAC;AACrB,GACA;IACE,YAAY;AACd;AAGF,MAAM,aAAa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;uCAErD"}},
    {"offset": {"line": 311, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/app/api/students/import/route.ts"],"sourcesContent":["import { NextResponse } from \"next/server\";\r\nimport connectDB from \"@/lib/db\";\r\nimport StudentModel from \"@/models/Student\";\r\nimport { Student } from \"@/types/index\";\r\nimport UserModel from \"@/models/User\";\r\nimport ClassModel from \"@/models/Classe\";\r\n\r\nexport async function POSTCLASSES() {\r\n  try {\r\n    await connectDB();\r\n\r\n    // Fetch all students\r\n    const students = await StudentModel.find();\r\n\r\n    // Validate that we have students\r\n    if (!students || students.length === 0) {\r\n      return NextResponse.json({ error: \"No students found\" }, { status: 400 });\r\n    }\r\n\r\n    // Group students by class\r\n    const groupedClasses = students.reduce((acc: Record<string, any>, student) => {\r\n      if (!acc[student.class]) {\r\n        acc[student.class] = {\r\n          level: student.class,\r\n          students: [],\r\n        };\r\n      }\r\n      acc[student.class].students.push(student);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Fetch all teachers\r\n    const teachers = await UserModel.find({ role: \"Professeur\" });\r\n\r\n    // Prepare classes with teacher information\r\n    const classes = Object.keys(groupedClasses).map((className) => {\r\n      const teacher = teachers.find((t) => t.class === className);\r\n\r\n      return {\r\n        level: className,\r\n        teacher: teacher ? `${teacher.firstName} ${teacher.lastName}` : \"Pas de professeur assigné à cette classe\",\r\n        students: groupedClasses[className].students.map((s: Student) => ({\r\n          firstName: s.firstName,\r\n          lastName: s.lastName,\r\n          class: s.class,\r\n          birthDate: s.birthDate,\r\n          email: s.email,\r\n          parentEmail: s.parentEmail,\r\n        })),\r\n        studentsNumber: groupedClasses[className].students.length,\r\n      };\r\n    });\r\n\r\n    // Insert classes into the ClassModel collection\r\n    const result = await ClassModel.insertMany(classes);\r\n\r\n    return NextResponse.json({\r\n      message: \"Classes created successfully\",\r\n      data: result,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Error creating classes:\", error);\r\n    return NextResponse.json({ error: \"Error creating classes\" }, { status: 500 });\r\n  }\r\n}\r\n\r\nexport async function POST(request: Request) {\r\n  try {\r\n    await connectDB();\r\n\r\n    // Insérer les documents dans MongoDB\r\n    const students = await request.json();\r\n    console.log(\"Students data:\", students);\r\n\r\n    // Validation de la structure de données (assurez-vous que c'est un tableau d'étudiants)\r\n    if (!Array.isArray(students)) {\r\n      return new NextResponse(\"Invalid data format\", { status: 400 });\r\n    }\r\n\r\n    const preparedStudents: Student[] = students.map((student) => ({\r\n      firstName: student.firstName,\r\n      lastName: student.lastName,\r\n      birthDate: student.birthDate, // Utiliser la date telle quelle\r\n      email: student.email, // Générer un email basé sur prénom et nom\r\n      parentEmail: student.parentEmail, // Email parent par défaut\r\n      class: student.class, // Classe par défaut\r\n    }));\r\n\r\n    const result = await StudentModel.insertMany(preparedStudents, { ordered: false }).catch((error) => {\r\n      if (error.writeErrors) {\r\n        console.error(\"Write errors during insertMany:\", error.writeErrors);\r\n        return error.insertedDocs || [];\r\n      }\r\n      throw error;\r\n    });\r\n    console.log(result);\r\n\r\n    // Classes creation\r\n    await POSTCLASSES();\r\n\r\n    return NextResponse.json({\r\n      message: \"Import terminé avec succès\",\r\n      imported: Array.isArray(result) ? result.length : 0,\r\n    });\r\n  } catch (error) {\r\n    console.error(\"Erreur lors de l'import:\", error);\r\n    return NextResponse.json({ error: \"Erreur lors de l'import des élèves\" }, { status: 500 });\r\n  }\r\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 437, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}