{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/lib/db.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst MONGODB_URI = process.env.MONGODB_URI || \"mongodb://user:user@localhost:27017/saint-vinci?authSource=admin\";\r\n\r\nif (!MONGODB_URI) {\r\n  throw new Error(\"Please define the MONGODB_URI environment variable inside .env\");\r\n}\r\n\r\n// Déclare globalement une propriété _mongoose pour gérer la connexion\r\ndeclare global {\r\n  var _mongoose: { conn: mongoose.Mongoose | null; promise: Promise<mongoose.Mongoose> | null };\r\n}\r\n\r\n// Cache de connexion pour éviter les reconnexions multiples pendant le développement\r\nlet cached = global._mongoose;\r\n\r\nif (!cached) {\r\n  cached = global._mongoose = { conn: null, promise: null };\r\n}\r\n\r\nasync function connectDB() {\r\n  // Si la connexion est déjà établie, on retourne la connexion\r\n  if (cached.conn) {\r\n    return cached.conn;\r\n  }\r\n\r\n  // Si la promesse de connexion n'existe pas, on la crée\r\n  if (!cached.promise) {\r\n    cached.promise = mongoose.connect(MONGODB_URI).then((mongooseInstance) => {\r\n      return mongooseInstance;\r\n    });\r\n  }\r\n\r\n  try {\r\n    cached.conn = await cached.promise;\r\n  } catch (error) {\r\n    cached.promise = null; // Réinitialisation de la promesse en cas d'erreur\r\n    console.error(\"Failed to connect to MongoDB:\", error);\r\n    throw error;\r\n  }\r\n\r\n  return cached.conn;\r\n}\r\n\r\nexport default connectDB;\r\nexport { mongoose }; // Ajout de l'exportation de mongoose\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,cAAc,QAAQ,GAAG,CAAC,WAAW,IAAI;AAE/C,uCAAkB;;AAElB;AAOA,qFAAqF;AACrF,IAAI,SAAS,OAAO,SAAS;AAE7B,IAAI,CAAC,QAAQ;IACX,SAAS,OAAO,SAAS,GAAG;QAAE,MAAM;QAAM,SAAS;IAAK;AAC1D;AAEA,eAAe;IACb,6DAA6D;IAC7D,IAAI,OAAO,IAAI,EAAE;QACf,OAAO,OAAO,IAAI;IACpB;IAEA,uDAAuD;IACvD,IAAI,CAAC,OAAO,OAAO,EAAE;QACnB,OAAO,OAAO,GAAG,iGAAA,CAAA,UAAQ,CAAC,OAAO,CAAC,aAAa,IAAI,CAAC,CAAC;YACnD,OAAO;QACT;IACF;IAEA,IAAI;QACF,OAAO,IAAI,GAAG,MAAM,OAAO,OAAO;IACpC,EAAE,OAAO,OAAO;QACd,OAAO,OAAO,GAAG,MAAM,kDAAkD;QACzE,QAAQ,KAAK,CAAC,iCAAiC;QAC/C,MAAM;IACR;IAEA,OAAO,OAAO,IAAI;AACpB;uCAEe;;CACM,qCAAqC"}},
    {"offset": {"line": 95, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 110, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/SchoolYear.ts"],"sourcesContent":["import mongoose from 'mongoose';\n\nconst SchoolYearSchema = new mongoose.Schema({\n  year: {\n    type: String,\n    required: [true, \"L'année scolaire est requise\"],\n    unique: true,\n    validate: {\n      validator: function(v: string) {\n        return /^\\d{4}-\\d{4}$/.test(v);\n      },\n      message: (props: { value: any; }) => `${props.value} n'est pas un format d'année scolaire valide (YYYY-YYYY)`\n    }\n  },\n  isActive: {\n    type: Boolean,\n    default: false\n  },\n  archivedAt: {\n    type: Date,\n    default: null\n  }\n}, {\n  timestamps: true\n});\n\nconst SchoolYearModel = mongoose.models.SchoolYear || mongoose.model('SchoolYear', SchoolYearSchema);\n\nexport default SchoolYearModel"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,mBAAmB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC;IAC3C,MAAM;QACJ,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,QAAQ;QACR,UAAU;YACR,WAAW,SAAS,CAAS;gBAC3B,OAAO,gBAAgB,IAAI,CAAC;YAC9B;YACA,SAAS,CAAC,QAA2B,GAAG,MAAM,KAAK,CAAC,wDAAwD,CAAC;QAC/G;IACF;IACA,UAAU;QACR,MAAM;QACN,SAAS;IACX;IACA,YAAY;QACV,MAAM;QACN,SAAS;IACX;AACF,GAAG;IACD,YAAY;AACd;AAEA,MAAM,kBAAkB,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,UAAU,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,cAAc;uCAEpE"}},
    {"offset": {"line": 143, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 149, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/Student.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\n\r\nconst StudentSchema = new mongoose.Schema(\r\n  {\r\n    firstName: {\r\n      type: String,\r\n      required: [true, \"Le prénom est requis\"],\r\n      trim: true,\r\n    },\r\n    lastName: {\r\n      type: String,\r\n      required: [true, \"Le nom est requis\"],\r\n      trim: true,\r\n    },\r\n    class: {\r\n      type: String,\r\n      required: [true, \"La classe est requise\"],\r\n    },\r\n    birthDate: {\r\n      type: String,\r\n      required: [true, \"La date de naissance est requise\"],\r\n    },\r\n    email: {\r\n      type: String,\r\n      required: [true, \"L'email est requis\"],\r\n      unique: true,\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    parentEmail: {\r\n      type: String,\r\n      required: [true, \"L'email du parent est requis\"],\r\n      trim: true,\r\n      lowercase: true,\r\n    },\r\n    admission: {\r\n      type: String,\r\n      enum: [\"\", \"admis\", \"redoublement\"],\r\n      default: \"\",\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\n// Create and export the model only once\r\nconst StudentModel = mongoose.models.Student || mongoose.model(\"Student\", StudentSchema);\r\n\r\nexport default StudentModel;\r\n"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,gBAAgB,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACvC;IACE,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAuB;QACxC,MAAM;IACR;IACA,UAAU;QACR,MAAM;QACN,UAAU;YAAC;YAAM;SAAoB;QACrC,MAAM;IACR;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;IAC3C;IACA,WAAW;QACT,MAAM;QACN,UAAU;YAAC;YAAM;SAAmC;IACtD;IACA,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAqB;QACtC,QAAQ;QACR,MAAM;QACN,WAAW;IACb;IACA,aAAa;QACX,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;QAChD,MAAM;QACN,WAAW;IACb;IACA,WAAW;QACT,MAAM;QACN,MAAM;YAAC;YAAI;YAAS;SAAe;QACnC,SAAS;IACX;AACF,GACA;IACE,YAAY;AACd;AAGF,wCAAwC;AACxC,MAAM,eAAe,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,OAAO,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,WAAW;uCAE3D"}},
    {"offset": {"line": 219, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 281, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/lib/auth.ts"],"sourcesContent":["import jwt, { JwtPayload } from \"jsonwebtoken\";\r\nimport { jwtVerify } from \"jose\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { NextRequest } from \"next/server\";\r\n\r\n// Définition de l'interface pour le payload décodé du JWT\r\ninterface DecodedToken extends JwtPayload {\r\n  id: string;\r\n  email: string;\r\n  role: \"admin\" | \"professeur\"; // Adaptez les rôles à vos besoins\r\n  iat: number;\r\n  exp: number;\r\n}\r\n\r\nconst JWT_SECRET =\r\n  process.env.JWT_SECRET ||\r\n  \"45820f08a0329cd43151e6990cf4ad917a9e04ed6abba1b49802e7d9893b828605aab07669ee90ab1eb6f0c5aaa8990cd6f89389d0d43771e2f12e9c64906186\";\r\n\r\nexport function generateToken(user: any) {\r\n  return jwt.sign(\r\n    {\r\n      id: user._id,\r\n      email: user.email,\r\n      role: user.role,\r\n    },\r\n    JWT_SECRET,\r\n    { expiresIn: \"24h\" }\r\n  );\r\n}\r\n\r\nexport async function verifyAuth(request: NextRequest): Promise<DecodedToken | null> {\r\n  const token = request.cookies.get(\"token\")?.value;\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const secret = new TextEncoder().encode(JWT_SECRET);\r\n    const { payload } = await jwtVerify(token, secret);\r\n    const decoded = payload as DecodedToken;\r\n\r\n    if (\r\n      typeof decoded.id === \"string\" &&\r\n      typeof decoded.email === \"string\" &&\r\n      typeof decoded.role === \"string\" &&\r\n      decoded.role in { admin: true, professeur: true } // Vérifie si le rôle est valide\r\n    ) {\r\n      return decoded;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function requireAuth(request: NextRequest): Promise<DecodedToken> {\r\n  const user = await verifyAuth(request);\r\n\r\n  if (!user) {\r\n    throw NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\nexport async function requireAdmin(request: NextRequest): Promise<DecodedToken> {\r\n  const user = await requireAuth(request);\r\n\r\n  // Vérifiez si l'utilisateur est un DecodedToken et son rôle\r\n  if (user.role !== \"admin\") {\r\n    throw NextResponse.json({ error: \"Accès refusé\" }, { status: 403 });\r\n  }\r\n\r\n  return user;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AAEA;AADA;;;;AAaA,MAAM,aACJ,QAAQ,GAAG,CAAC,UAAU,IACtB;AAEK,SAAS,cAAc,IAAS;IACrC,OAAO,uIAAA,CAAA,UAAG,CAAC,IAAI,CACb;QACE,IAAI,KAAK,GAAG;QACZ,OAAO,KAAK,KAAK;QACjB,MAAM,KAAK,IAAI;IACjB,GACA,YACA;QAAE,WAAW;IAAM;AAEvB;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5C,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,IAAI;QACF,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC;QACxC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,8JAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,MAAM,UAAU;QAEhB,IACE,OAAO,QAAQ,EAAE,KAAK,YACtB,OAAO,QAAQ,KAAK,KAAK,YACzB,OAAO,QAAQ,IAAI,KAAK,YACxB,QAAQ,IAAI,IAAI;YAAE,OAAO;YAAM,YAAY;QAAK,EAAE,gCAAgC;UAClF;YACA,OAAO;QACT;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,YAAY,OAAoB;IACpD,MAAM,OAAO,MAAM,WAAW;IAE9B,IAAI,CAAC,MAAM;QACT,MAAM,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACnE;IAEA,OAAO;AACT;AAEO,eAAe,aAAa,OAAoB;IACrD,MAAM,OAAO,MAAM,YAAY;IAE/B,4DAA4D;IAC5D,IAAI,KAAK,IAAI,KAAK,SAAS;QACzB,MAAM,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACnE;IAEA,OAAO;AACT"}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 353, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/models/Classe.ts"],"sourcesContent":["import mongoose from \"mongoose\";\r\nimport StudentModel from \"./Student\";\r\n\r\nconst ClassSchema = new mongoose.Schema(\r\n  {\r\n    level: {\r\n      type: String,\r\n      required: [true, \"La classe est requise\"],\r\n      unique: true,\r\n    },\r\n    studentsNumber: {\r\n      type: Number,\r\n      required: [true, \"Le nombre d'élève est requis\"],\r\n    },\r\n    teacher: {\r\n      type: String,\r\n      required: [true, \"Le professeur est requis\"],\r\n    },\r\n    students: {\r\n      type: Array,\r\n      value: [StudentModel],\r\n    },\r\n  },\r\n  {\r\n    timestamps: true,\r\n  }\r\n);\r\n\r\nconst ClassModel = mongoose.models.Class || mongoose.model(\"Class\", ClassSchema);\r\n\r\nexport default ClassModel;\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,cAAc,IAAI,iGAAA,CAAA,UAAQ,CAAC,MAAM,CACrC;IACE,OAAO;QACL,MAAM;QACN,UAAU;YAAC;YAAM;SAAwB;QACzC,QAAQ;IACV;IACA,gBAAgB;QACd,MAAM;QACN,UAAU;YAAC;YAAM;SAA+B;IAClD;IACA,SAAS;QACP,MAAM;QACN,UAAU;YAAC;YAAM;SAA2B;IAC9C;IACA,UAAU;QACR,MAAM;QACN,OAAO;YAAC,mHAAA,CAAA,UAAY;SAAC;IACvB;AACF,GACA;IACE,YAAY;AACd;AAGF,MAAM,aAAa,iGAAA,CAAA,UAAQ,CAAC,MAAM,CAAC,KAAK,IAAI,iGAAA,CAAA,UAAQ,CAAC,KAAK,CAAC,SAAS;uCAErD"}},
    {"offset": {"line": 394, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 400, "column": 0}, "map": {"version":3,"sources":["file:///home/marteau/Documents/final/jachv2/app/api/school-years/%5Byear%5D/archive/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\nimport connectDB from '@/lib/db';\nimport SchoolYear from '@/models/SchoolYear';\nimport StudentModel from '@/models/Student';\nimport ClassModel from '@/models/Classe'; // Modèle pour les classes\nimport { requireAdmin } from '@/lib/auth';\n\nexport async function POST(\n  request: NextRequest,\n  { params }: { params: { year: string } }\n) {\n  try {\n    const user = await requireAdmin(request);\n    if ('error' in user) {\n      return NextResponse.json(user, { status: 401 });\n    }\n\n    await connectDB();\n\n    // Vérifier si l'année existe\n    const schoolYear = await SchoolYear.findOne({ year: params.year });\n    if (!schoolYear) {\n      return NextResponse.json(\n        { error: 'Année scolaire non trouvée' },\n        { status: 404 }\n      );\n    }\n\n    // Archiver la collection Students\n    const studentArchiveCollectionName = `students_${params.year.replace('-', '_')}`;\n    await StudentModel.aggregate([{ $out: studentArchiveCollectionName }]);\n\n    // Archiver la collection Classes\n    const classArchiveCollectionName = `classes_${params.year.replace('-', '_')}`;\n    await ClassModel.aggregate([{ $out: classArchiveCollectionName }]);\n\n    // Marquer l'année comme archivée\n    schoolYear.archivedAt = new Date();\n    await schoolYear.save();\n\n    return NextResponse.json({\n      message: 'Année scolaire archivée avec succès',\n      archivedCollections: {\n        students: studentArchiveCollectionName,\n        classes: classArchiveCollectionName,\n      },\n    });\n  } catch (error) {\n    console.error(error);\n    return NextResponse.json(\n      { error: \"Erreur lors de l'archivage de l'année scolaire\" },\n      { status: 500 }\n    );\n  }\n}\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA,sMAA0C,0BAA0B;AACpE;AAJA;;;;;;;AAMO,eAAe,KACpB,OAAoB,EACpB,EAAE,MAAM,EAAgC;IAExC,IAAI;QACF,MAAM,OAAO,MAAM,CAAA,GAAA,6GAAA,CAAA,eAAY,AAAD,EAAE;QAChC,IAAI,WAAW,MAAM;YACnB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;gBAAE,QAAQ;YAAI;QAC/C;QAEA,MAAM,CAAA,GAAA,2HAAA,CAAA,UAAS,AAAD;QAEd,6BAA6B;QAC7B,MAAM,aAAa,MAAM,sHAAA,CAAA,UAAU,CAAC,OAAO,CAAC;YAAE,MAAM,OAAO,IAAI;QAAC;QAChE,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAA6B,GACtC;gBAAE,QAAQ;YAAI;QAElB;QAEA,kCAAkC;QAClC,MAAM,+BAA+B,CAAC,SAAS,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,MAAM;QAChF,MAAM,mHAAA,CAAA,UAAY,CAAC,SAAS,CAAC;YAAC;gBAAE,MAAM;YAA6B;SAAE;QAErE,iCAAiC;QACjC,MAAM,6BAA6B,CAAC,QAAQ,EAAE,OAAO,IAAI,CAAC,OAAO,CAAC,KAAK,MAAM;QAC7E,MAAM,kHAAA,CAAA,UAAU,CAAC,SAAS,CAAC;YAAC;gBAAE,MAAM;YAA2B;SAAE;QAEjE,iCAAiC;QACjC,WAAW,UAAU,GAAG,IAAI;QAC5B,MAAM,WAAW,IAAI;QAErB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,qBAAqB;gBACnB,UAAU;gBACV,SAAS;YACX;QACF;IACF,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAiD,GAC1D;YAAE,QAAQ;QAAI;IAElB;AACF"}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}