{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 31, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/auth.ts"],"sourcesContent":["import jwt, { JwtPayload } from \"jsonwebtoken\";\r\nimport { jwtVerify } from \"jose\";\r\nimport { NextResponse } from \"next/server\";\r\nimport { NextRequest } from \"next/server\";\r\n\r\n// Définition de l'interface pour le payload décodé du JWT\r\ninterface DecodedToken extends JwtPayload {\r\n  id: string;\r\n  email: string;\r\n  role: \"admin\" | \"professeur\"; // Adaptez les rôles à vos besoins\r\n  iat: number;\r\n  exp: number;\r\n}\r\n\r\nconst JWT_SECRET =\r\n  process.env.JWT_SECRET ||\r\n  \"45820f08a0329cd43151e6990cf4ad917a9e04ed6abba1b49802e7d9893b828605aab07669ee90ab1eb6f0c5aaa8990cd6f89389d0d43771e2f12e9c64906186\";\r\n\r\nexport function generateToken(user: any) {\r\n  return jwt.sign(\r\n    {\r\n      id: user._id,\r\n      email: user.email,\r\n      role: user.role,\r\n    },\r\n    JWT_SECRET,\r\n    { expiresIn: \"24h\" }\r\n  );\r\n}\r\n\r\nexport async function verifyAuth(request: NextRequest): Promise<DecodedToken | null> {\r\n  const token = request.cookies.get(\"token\")?.value;\r\n  if (!token) {\r\n    return null;\r\n  }\r\n\r\n  try {\r\n    const secret = new TextEncoder().encode(JWT_SECRET);\r\n    const { payload } = await jwtVerify(token, secret);\r\n    const decoded = payload as DecodedToken;\r\n\r\n    if (\r\n      typeof decoded.id === \"string\" &&\r\n      typeof decoded.email === \"string\" &&\r\n      typeof decoded.role === \"string\" &&\r\n      decoded.role in { admin: true, professeur: true } // Vérifie si le rôle est valide\r\n    ) {\r\n      return decoded;\r\n    }\r\n    return null;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\nexport async function requireAuth(request: NextRequest): Promise<DecodedToken> {\r\n  const user = await verifyAuth(request);\r\n\r\n  if (!user) {\r\n    throw NextResponse.json({ error: \"Non autorisé\" }, { status: 401 });\r\n  }\r\n\r\n  return user;\r\n}\r\n\r\nexport async function requireAdmin(request: NextRequest): Promise<DecodedToken> {\r\n  const user = await requireAuth(request);\r\n\r\n  // Vérifiez si l'utilisateur est un DecodedToken et son rôle\r\n  if (user.role !== \"admin\") {\r\n    throw NextResponse.json({ error: \"Accès refusé\" }, { status: 403 });\r\n  }\r\n\r\n  return user;\r\n}\r\n"],"names":[],"mappings":";;;;;;AAAA;AAEA;AADA;AACA;;;;AAYA,MAAM,aACJ,QAAQ,GAAG,CAAC,UAAU,IACtB;AAEK,SAAS,cAAc,IAAS;IACrC,OAAO,qIAAA,CAAA,UAAG,CAAC,IAAI,CACb;QACE,IAAI,KAAK,GAAG;QACZ,OAAO,KAAK,KAAK;QACjB,MAAM,KAAK,IAAI;IACjB,GACA,YACA;QAAE,WAAW;IAAM;AAEvB;AAEO,eAAe,WAAW,OAAoB;IACnD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU;IAC5C,IAAI,CAAC,OAAO;QACV,OAAO;IACT;IAEA,IAAI;QACF,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC;QACxC,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,wJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,MAAM,UAAU;QAEhB,IACE,OAAO,QAAQ,EAAE,KAAK,YACtB,OAAO,QAAQ,KAAK,KAAK,YACzB,OAAO,QAAQ,IAAI,KAAK,YACxB,QAAQ,IAAI,IAAI;YAAE,OAAO;YAAM,YAAY;QAAK,EAAE,gCAAgC;UAClF;YACA,OAAO;QACT;QACA,OAAO;IACT,EAAE,OAAO,OAAO;QACd,OAAO;IACT;AACF;AAEO,eAAe,YAAY,OAAoB;IACpD,MAAM,OAAO,MAAM,WAAW;IAE9B,IAAI,CAAC,MAAM;QACT,MAAM,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACnE;IAEA,OAAO;AACT;AAEO,eAAe,aAAa,OAAoB;IACrD,MAAM,OAAO,MAAM,YAAY;IAE/B,4DAA4D;IAC5D,IAAI,KAAK,IAAI,KAAK,SAAS;QACzB,MAAM,qLAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAe,GAAG;YAAE,QAAQ;QAAI;IACnE;IAEA,OAAO;AACT"}},
    {"offset": {"line": 98, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 104, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/middleware.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\nimport { verifyAuth } from './lib/auth';\n\nconst adminOnlyPaths = [\n  '/dashboard/subjects',\n  '/dashboard/settings',\n];\n\nexport async function middleware(request: NextRequest) {\n  // Liste des chemins publics\n  const publicPaths = ['/', '/auth/login'];\n  \n  // Vérifier si le chemin est public\n  if (publicPaths.includes(request.nextUrl.pathname)) {\n    return NextResponse.next();\n  }\n\n  // Vérifier l'authentification pour les autres chemins\n  const token = request.cookies.get('token')?.value || '';  \n\n  if (!token) {\n    return NextResponse.redirect(new URL('/', request.url));\n  }\n\n  try {\n    const decoded = await verifyAuth(request);\n    if (!decoded) {\n      return NextResponse.redirect(new URL('/', request.url));\n    }\n\n    // Vérifier les permissions pour les chemins réservés aux admins\n    if (adminOnlyPaths.some(path => request.nextUrl.pathname.startsWith(path)) && decoded.role !== 'admin') {\n      return NextResponse.redirect(new URL('/dashboard', request.url));\n    }\n\n    return NextResponse.next();\n  } catch (error) {\n    return NextResponse.redirect(new URL('/', request.url));\n  }\n}\n\nexport const config = {\n  matcher: ['/dashboard/:path*'],\n};"],"names":[],"mappings":";;;;AAAA;AAEA;AAFA;;;AAIA,MAAM,iBAAiB;IACrB;IACA;CACD;AAEM,eAAe,WAAW,OAAoB;IACnD,4BAA4B;IAC5B,MAAM,cAAc;QAAC;QAAK;KAAc;IAExC,mCAAmC;IACnC,IAAI,YAAY,QAAQ,CAAC,QAAQ,OAAO,CAAC,QAAQ,GAAG;QAClD,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B;IAEA,sDAAsD;IACtD,MAAM,QAAQ,QAAQ,OAAO,CAAC,GAAG,CAAC,UAAU,SAAS;IAErD,IAAI,CAAC,OAAO;QACV,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;IAEA,IAAI;QACF,MAAM,UAAU,MAAM,CAAA,GAAA,2GAAA,CAAA,aAAU,AAAD,EAAE;QACjC,IAAI,CAAC,SAAS;YACZ,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;QACvD;QAEA,gEAAgE;QAChE,IAAI,eAAe,IAAI,CAAC,CAAA,OAAQ,QAAQ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,UAAU,QAAQ,IAAI,KAAK,SAAS;YACtG,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,QAAQ,GAAG;QAChE;QAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI;IAC1B,EAAE,OAAO,OAAO;QACd,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,KAAK,QAAQ,GAAG;IACvD;AACF;AAEO,MAAM,SAAS;IACpB,SAAS;QAAC;KAAoB;AAChC"}},
    {"offset": {"line": 151, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}